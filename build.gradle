plugins {
    id 'java'
    id 'application'
    id 'base'
    id 'nebula.lint' version '9.3.4'
    id 'com.github.hierynomus.license' version '0.15.0'
}

apply plugin: 'java'
apply plugin: 'base'
apply plugin: 'nebula.lint'
apply plugin: 'com.github.hierynomus.license'
apply plugin: "application"

repositories {
   mavenLocal()
   jcenter()
}

dependencies {
  implementation 'org.slf4j:slf4j-api:1.7.26'
  implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.8' 
  implementation 'org.jasypt:jasypt:1.9.2'
  runtimeOnly 'org.slf4j:slf4j-simple:1.6.4'
  testImplementation "junit:junit:$junitVersion"
}

group = 'org.apereo.openequella.adminconsole'
version = artifactVersion
mainClassName = 'org.apereo.openequella.adminconsole.launcher.ClientLauncher'

// Gradlelint is broken: https://github.com/nebula-plugins/gradle-lint-plugin/issues/203
gradleLint.rules = [/*'all-dependency', */'dependency-parentheses', 'duplicate-dependency-class']

license {
    strictCheck
    header = file('LICENSE')
}


jar {
  archiveFileName = 'admin.jar'
  manifest {
      attributes('Implementation-Title': project.name,
              'Implementation-Version': project.version,
              'Main-Class': mainClassName)
  }
}

task cleanDist() {
  dependsOn 'clean'
  doLast {
    delete 'dist'
  }
}

task copyDistArtifacts(type: Copy) {
  dependsOn 'copyScripts'

  from(file('build/libs/admin.jar'))
  from configurations.default
  into('dist/lib')
}

task copyScripts(type: Copy){
  dependsOn 'cleanDist', 'jar'

  from(file('scripts'))
  into('dist')
  include('**/*')
}

task dist {
  description 'Copies everything required for the distributable into a dist folder'
  dependsOn 'copyDistArtifacts'
}



final TARGZ = 'tar.gz', ZIP = 'zip', ZIPTASK = 'Zip', TARTASK = 'Tar', WINDOWS = 'windows', MAC = 'mac', LINUX = 'linux'
final jreDownloadDir = file("$buildDir/jre-downloads")
final jreExtractDir = "${jreDownloadDir.absolutePath}/jre"
final jarDir = "${buildDir}/libs"

class PackageProperties {
    String packageFileExt
    String scriptFile
    String taskType
    boolean fileCompression

}

class JreProperties {
    String hash
    String fileName
    String getDownloadUrl() {"https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u212-b03/${fileName}"}
    File getJre() {new File("build/jre-downloads/${fileName}")}
}

final def packageProperties = [
        windows: new PackageProperties(packageFileExt: ZIP, scriptFile: 'Windows-launcher.bat', taskType: ZIPTASK, fileCompression: false),
        linux: new PackageProperties(packageFileExt: TARGZ, scriptFile: 'Linux-launcher.sh', taskType: TARTASK, fileCompression: true),
        mac: new PackageProperties(packageFileExt: TARGZ, scriptFile: 'Mac-launcher.sh', taskType: TARTASK, fileCompression: true)
]

final def jreProperties = [
        windows: new JreProperties(hash: 'c09bab89cd82483c371597c5c364094a145c1fbba43a1d3d7c3e350b89dedc89',
                fileName: 'OpenJDK8U-jre_x64_windows_hotspot_8u212b03.zip'),
        linux: new JreProperties(hash: '74daf0b77a7fd679cbb3a6228e0efa8c4a90b7664aa057f211e34bbfb38640fb',
                fileName: 'OpenJDK8U-jre_x64_linux_hotspot_8u212b03.tar.gz'),
        mac: new JreProperties(hash: '80855320c42a3b06617c6e466c64df67731542a805972185b075ca6cb1222c7f',
                fileName: 'OpenJDK8U-jre_x64_mac_hotspot_8u212b03.tar.gz')
]

import java.security.MessageDigest

task downloadJre(description: 'Download OpenJRE of Linux, Windows and Mac, and check their hashes') {
    doFirst {
        if (!jreDownloadDir.exists()) {
            jreDownloadDir.mkdirs()
        }

        // Filter out entries that already have JRE downloaded
        jreProperties.findAll {String sys, JreProperties props -> !props.jre.exists()}
                .collect {String sys, JreProperties props ->
            Thread.start {
                println("Start downloading OpenJRE for ${sys}...")
                new URL(props.downloadUrl as String).withInputStream {
                    props.jre.newOutputStream() << it
                }
                if (checkHash(props)) {
                    println("OpenJRE for ${sys} is downloaded.")
                } else {
                    println("Hash mismatch for downloaded ${sys} JRE. File may have been modified.")
                    System.exit(1)
                }
            }
        }*.join()
    }
}

// Execute downloadJre only when any one of three JREs is missing
downloadJre.onlyIf {
    jreProperties.any {sys,props ->
        !props.jre.exists()
    }
}

static boolean checkHash(JreProperties props) {
    final hash = MessageDigest.getInstance('SHA-256').with {
        props.jre.eachByte(1024) {buff,len ->
            update(buff, 0, len)
        }
        digest().encodeHex() as String
    }

    hash == props.hash
}

task unzipJre(description: 'Unzip a JRE when the extract directory is missing', dependsOn: downloadJre) {
    doFirst {

        jreProperties.each {sys, props ->
            // If any one of three JRE folders is missing then only unzip the corresponding JRE
            if (!new File("${jreDownloadDir.absolutePath}/jre/${sys}").exists()) {
                if (props.jre.name.endsWith(ZIP)) {
                    copy {
                        from zipTree(props.jre)
                        into "$jreExtractDir/${WINDOWS}"
                    }
                } else {
                    copy {
                        from tarTree(resources.gzip(props.jre))
                        into "$jreExtractDir/${props.jre.name.contains(MAC) ? MAC : LINUX}"
                    }
                }
            }
        }
    }
}

build.dependsOn(unzipJre)

distributions {
    packageProperties.each { String sys, PackageProperties props ->
        String scriptDir = "${projectDir}/launcher-scripts/${props.scriptFile}"
        String jreExtractSubDir = "${jreExtractDir}/$sys"

        "${sys}Packages" {
            baseName = "admin-console-package-for-${sys}"
            contents {
                from {file(jarDir)}
                from {file(jreExtractSubDir)}
                from {file(scriptDir)}
            }
        }
    }
}

// We want tar files are compressed by GZIP and their extension name is 'tar.gz'
tasks.withType(Tar){
    compression = Compression.GZIP
    archiveExtension = 'tar.gz'
}
// We do not need the default distributions that have not JRE bundled
distTar.enabled = false
distZip.enabled = false
// We do not need tar for Windows and zip for both Mac and Linux.
windowsPackagesDistTar.enabled = false
linuxPackagesDistZip.enabled = false
macPackagesDistZip.enabled = false
// These plugin-generated distribution tasks must run after JREs are downloaded and unzipped.
linuxPackagesDistTar.mustRunAfter(unzipJre)
macPackagesDistTar.mustRunAfter(unzipJre)
windowsPackagesDistZip.mustRunAfter(unzipJre)