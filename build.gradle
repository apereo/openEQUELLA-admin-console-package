plugins {
    id 'java'
    id 'application'
    id 'base'
    id 'nebula.lint' version '9.3.4'
    id 'com.github.hierynomus.license' version '0.15.0'
    id 'distribution'
}

apply plugin: 'java'
apply plugin: 'base'
apply plugin: 'nebula.lint'
apply plugin: 'com.github.hierynomus.license'
apply plugin: "application"

repositories {
   mavenLocal()
   jcenter()
}

dependencies {
  implementation 'org.slf4j:slf4j-api:1.7.26'
  implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.8' 
  implementation 'org.jasypt:jasypt:1.9.2'
  runtimeOnly 'org.slf4j:slf4j-simple:1.6.4'
  testImplementation "junit:junit:$junitVersion"
}

group = 'org.apereo.openequella.adminconsole'
version = artifactVersion
mainClassName = 'org.apereo.openequella.adminconsole.launcher.ClientLauncher'

// Gradlelint is broken: https://github.com/nebula-plugins/gradle-lint-plugin/issues/203
gradleLint.rules = [/*'all-dependency', */'dependency-parentheses', 'duplicate-dependency-class']

license {
    strictCheck
    header = file('LICENSE')
}


jar {
  archiveFileName = 'admin.jar'
  manifest {
      attributes('Implementation-Title': project.name,
              'Implementation-Version': project.version,
              'Main-Class': mainClassName)
  }
}

task cleanDist() {
  dependsOn 'clean'
  doLast {
    delete 'dist'
  }
}

task copyDistArtifacts(type: Copy) {
  dependsOn 'copyScripts'

  from(file('build/libs/admin.jar'))
  from configurations.default
  into('dist/lib')
}

task copyScripts(type: Copy){
  dependsOn 'cleanDist', 'jar'

  from(file('scripts'))
  into('dist')
  include('**/*')
}

task dist {
  description 'Copies everything required for the distributable into a dist folder'
  dependsOn 'copyDistArtifacts'
}



final TARGZ = 'tar.gz', ZIP = 'zip', ZIPTASK = 'Zip', TARTASK = 'Tar', WINDOWS = 'windows', MAC = 'mac', LINUX = 'linux'
final jreDownloadDir = file("$buildDir/jre-downloads")
final jreExtractDir = "${jreDownloadDir.absolutePath}/jre"

class PackageProperties {
    String packageFileExt
    String scriptFile
    String taskType
    boolean fileCompression

}

class JreProperties {
    String jreHash
    String jreFileExt
    String jreFileName
    String jreDownloadUrl
}

def packagePropertiesMap = [
        windows: new PackageProperties(packageFileExt: ZIP, scriptFile: 'Windows-launcher.bat', taskType: ZIPTASK, fileCompression: false),
        linux: new PackageProperties(packageFileExt: TARGZ, scriptFile: 'Linux-launcher.sh', taskType: TARTASK, fileCompression: true),
        mac: new PackageProperties(packageFileExt: TARGZ, scriptFile: 'Mac-launcher.sh', taskType: TARTASK, fileCompression: true)
]

def jrePropertiesMap = [
        windows: new JreProperties(jreFileExt: ZIP, jreHash: 'c09bab89cd82483c371597c5c364094a145c1fbba43a1d3d7c3e350b89dedc89'),
        linux: new JreProperties(jreFileExt: TARGZ, jreHash: '74daf0b77a7fd679cbb3a6228e0efa8c4a90b7664aa057f211e34bbfb38640fb'),
        mac: new JreProperties(jreFileExt: TARGZ, jreHash: '80855320c42a3b06617c6e466c64df67731542a805972185b075ca6cb1222c7f')
]

import java.security.MessageDigest

task downloadJre(description: 'Download OpenJRE of Linux, Windows and Mac, and check their hashes') {
    doFirst {
        if(!jreDownloadDir.exists()) {
            jreDownloadDir.mkdirs()
        }
        println("Start downloading OpenJRE of Linux, Windows and Mac...")
        jrePropertiesMap.collect {String sys,JreProperties props ->
            Thread.start {
                props.with {
                    jreFileName = "OpenJDK8U-jre_x64_${sys}_hotspot_8u212b03.${jreFileExt}"
                    jreDownloadUrl = "https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u212-b03/$jreFileName"
                    File jreFile = file("$jreDownloadDir.absolutePath/$jreFileName")

                    if(!jreFile.exists()){
                        new URL(jreDownloadUrl).withInputStream {
                            jreFile.newOutputStream() << it
                        }

                        final hash = MessageDigest.getInstance('SHA-256').with {
                            jreFile.eachByte(1024) {buff,len ->
                                update(buff, 0, len)
                            }
                            digest().encodeHex() as String
                        }
                        if(jreHash != hash) {
                            throw new RuntimeException("Hash mismatch for downloaded ${sys} JRE. File may have been modified.")
                        }
                        println("OpenJRE for ${sys} is downloaded")
                    }
                }
            }
        }.each {
            thread -> thread.join()
        }
    }
}

task unzipJre(description: 'Unzip JREs only when the extract directory is not existing', dependsOn:downloadJre) {
    doFirst {
        fileTree(jreDownloadDir).matching {
            // Excluding the jre folder
            exclude 'jre'
        }.each {jreFile ->
             if(jreFile.name.endsWith(ZIP)) {
                 copy {
                     from zipTree(jreFile)
                     into "$jreExtractDir/${WINDOWS}"
                 }
             }
             else {
                 copy {
                     from tarTree(resources.gzip(jreFile))
                     into "$jreExtractDir/${jreFile.name.contains(MAC) ? MAC : LINUX}"
                 }
             }
        }
    }
}

unzipJre.onlyIf {
    !file(jreExtractDir).exists()
}

task createPackages(description: 'Create three packages for Linux, Windows and Mac', dependsOn:unzipJre) {
    //This task also depends on other three tasks which are created by iterating osNames
}

packagePropertiesMap.each {String sys, PackageProperties props ->
    props.with {
        String packageDir = "${buildDir}/distributions/packages"
        String jarDir = "${buildDir}/libs"
        String scriptDir = "${projectDir}/launcher-scripts/${scriptFile}"
        String jreExtractSubDir = "${jreExtractDir}/$sys"
        Class taskCLass = Class.forName("org.gradle.api.tasks.bundling.${taskType}")

        task "packageFor$sys"(type: taskCLass, description: "Create ${sys} package") {
            mustRunAfter unzipJre
            archiveBaseName = "admin-console-package-for-${sys}"
            extension = packageFileExt
            if(fileCompression) {
                compression = Compression.GZIP
            }
            destinationDirectory = file(packageDir)

            from file(jarDir)
            from file(jreExtractSubDir)
            from file(scriptDir)
            exclude (["*.${ZIP}", "*.${TARGZ}"])

            doLast {
                println("Package for ${sys} is created under ${packageDir}")
            }
        }

        createPackages.dependsOn("packageFor$sys")
    }
}


build.finalizedBy(createPackages)
