plugins {
    id 'java'
    id 'application'
    id 'base'
    id 'nebula.lint' version '9.3.4'
    id 'com.github.hierynomus.license' version '0.15.0'
}

apply plugin: 'java'
apply plugin: 'base'
apply plugin: 'nebula.lint'
apply plugin: 'com.github.hierynomus.license'
apply plugin: "application"

repositories {
   mavenLocal()
   jcenter()
}

dependencies {
  implementation 'org.slf4j:slf4j-api:1.7.26'
  implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.8' 
  implementation 'org.jasypt:jasypt:1.9.2'
  runtimeOnly 'org.slf4j:slf4j-simple:1.6.4'
  testImplementation "junit:junit:$junitVersion"
}

group = 'org.apereo.openequella.adminconsole'
version = artifactVersion
mainClassName = 'org.apereo.openequella.adminconsole.launcher.ClientLauncher'

// Gradlelint is broken: https://github.com/nebula-plugins/gradle-lint-plugin/issues/203
gradleLint.rules = [/*'all-dependency', */'dependency-parentheses', 'duplicate-dependency-class']

license {
    strictCheck
    header = file('LICENSE')
}


jar {
  archiveFileName = 'admin.jar'
  manifest {
      attributes('Implementation-Title': project.name,
              'Implementation-Version': project.version,
              'Main-Class': mainClassName)
  }
}

task cleanDist() {
  dependsOn 'clean'
  doLast {
    delete 'dist'
  }
}

task copyDistArtifacts(type: Copy) {
  dependsOn 'copyScripts'

  from(file('build/libs/admin.jar'))
  from configurations.default
  into('dist/lib')
}

task copyScripts(type: Copy){
  dependsOn 'cleanDist', 'jar'

  from(file('scripts'))
  into('dist')
  include('**/*')
}

task dist {
  description 'Copies everything required for the distributable into a dist folder'
  dependsOn 'copyDistArtifacts'
}

ext {
    osNames = ['Linux', 'Windows', 'Mac']
    jdkFileName = "OpenJDK8U-jdk_x64_linux_hotspot_8u212b03.tar.gz"
    jdkDownloadDir = new File("$buildDir/jdk-downloads")
    jdkExtractDir = new File("$buildDir/jdk-downloads/jdk8u212-b03")
    jdkFile = new File("${jdkDownloadDir.getAbsolutePath()}/${jdkFileName}")
    jarDir = new File("$buildDir/libs")

}

import java.security.MessageDigest
task downloadJdk  {
    description "Download OpenJDK and check its hash"
    final originalFileHash = "dd28d6d2cde2b931caf94ac2422a2ad082ea62f0beee3bf7057317c53093de93"
    doFirst {
        if(!jdkDownloadDir.exists()) {
            jdkDownloadDir.mkdirs()
        }
        if(!jdkFile.exists()){
            new URL("https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u212-b03/${jdkFileName}")
                    .withInputStream {
                jdkFile.newOutputStream() << it
            }
            def digest = MessageDigest.getInstance("SHA-256");
            jdkFile.eachByte(1024) {buff,len ->
                digest.update(buff, 0, len)
            }
            final hash = digest.digest().encodeHex() as String
            if(hash != originalFileHash){
                throw new RuntimeException("Hash mismatch for downloaded JRE. File may have been modified.")
            }
        }
    }
}

task unzipJdk(dependsOn:downloadJdk ,type: Copy) {
            from tarTree(resources.gzip(jdkFile))
            into jdkDownloadDir
}
unzipJdk.onlyIf {
    !jdkExtractDir.exists()
}

task createPackages(dependsOn:unzipJdk) {
    description "Create three packages for Linux, Windows and Mac"
    //This task also depends on other three tasks which are created by iterating osNames
}

osNames.each { sys ->
    def packageDir = new File("$buildDir/distributions/packages")
    def scriptDir
    def taskType
    def fileExtension
    def fileCompression
    if(sys == "Windows"){
        taskType = "org.gradle.api.tasks.bundling.Zip"
        fileExtension = "zip"
        fileCompression = false
        scriptDir = new File("$projectDir/launcher-scripts/W-launcher.bat")
    }
    else if (sys == "Linux"){
        taskType = "org.gradle.api.tasks.bundling.Tar"
        fileExtension = "tar.gz"
        fileCompression = true
        scriptDir = new File("$projectDir/launcher-scripts/Linux-launcher.sh")
    }
    else {
        taskType = "org.gradle.api.tasks.bundling.Tar"
        fileExtension = "tar.gz"
        fileCompression = true
        scriptDir = new File("$projectDir/launcher-scripts/Mac-launcher.dmg")
    }
    def cls = Class.forName(taskType)
    task "packageFor$sys"(type: cls){
        doFirst {
            if(!packageDir.exists()){
                packageDir.mkdirs()
            }
        }
        mustRunAfter unzipJdk
        archiveBaseName = "admin-console-package-for-"+sys
        extension = fileExtension
        if(fileCompression) compression = Compression.GZIP
        destinationDirectory = packageDir
        from jarDir
        from jdkDownloadDir
        from scriptDir
        exclude '*.tar.gz'
        doLast {
            println("Package for $sys is created under "+packageDir.getAbsolutePath())
        }
    }
    createPackages.dependsOn("packageFor$sys")
}

build.finalizedBy(createPackages)
